// controllers/featureController.js
const { spawn } = require('child_process');
const path      = require('path');

exports.analyzeImages = (req, res) => {
  console.log('‚ö° analyzeImages called, files:', req.files.length);

  let imagesB64, labels;
  try {
    imagesB64 = req.files.map(f => f.buffer.toString('base64'));
    labels    = JSON.parse(req.body.labels);
  } catch (e) {
    console.error('‚ùå Invalid input:', e);
    return res.status(400).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö' });
  }

  const payload = JSON.stringify({ images: imagesB64, labels });
  const script  = path.join(__dirname, '../scripts/main_b64.py');

  const py = spawn('python', [script], { stdio: ['pipe','pipe','pipe'] });

  // 1) –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø—É—Å–∫—É
  py.on('error', err => {
    console.error('‚ùå Cannot start Python:', err);
    return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Python' });
  });

  // 2) –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ stdin (write EOF —Ç–æ—â–æ)
  py.stdin.on('error', err => {
    console.warn('‚ö†Ô∏è stdin error:', err);
    // –Ω—ñ—á–æ–≥–æ –Ω–µ –∫–∏–¥–∞—î–º–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É–π–º–æ
  });

  // 3) –ó–±–∏—Ä–∞—î–º–æ stdout/stderr
  let out = '', errBuf = '';
  py.stdout.on('data', chunk => { out    += chunk.toString(); });
  py.stderr.on('data', chunk => { errBuf += chunk.toString(); });

  // 4) –ö–æ–ª–∏ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è
  py.on('close', code => {
    console.log(`üêç Python exited with ${code}`);
    if (code !== 0) {
      console.error('Python stderr:', errBuf);
      return res.status(500).json({ error: errBuf.trim() || 'Python error' });
    }
    try {
      const result = JSON.parse(out);
      return res.json(result);
    } catch (e) {
      console.error('‚ùå Broken JSON from Python:', out);
      return res.status(500).json({ error: '–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ' });
    }
  });

  // 5) –ü–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ
  try {
    py.stdin.write(payload);
    py.stdin.end();
  } catch (e) {
    console.warn('‚ö†Ô∏è Write to stdin failed:', e);
    // —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–∞–¥–∞—î
  }
};
